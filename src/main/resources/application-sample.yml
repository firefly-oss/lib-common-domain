# Firefly Common Domain Library - Complete Configuration Sample
# This file demonstrates all available configuration options

spring:
  profiles:
    active: development

---
# Development Profile - Application Events (Default)
spring:
  config:
    activate:
      on-profile: development

firefly:
  events:
    enabled: true
    adapter: application_event  # Local events for development
    
  stepevents:
    enabled: true  # Only setting needed - uses Domain Events infrastructure

---
# Production Profile - Kafka Configuration
spring:
  config:
    activate:
      on-profile: production-kafka

firefly:
  events:
    enabled: true
    adapter: kafka
    
    kafka:
      # Connection settings
      bootstrap-servers: localhost:9092,localhost:9093
      
      # Optional: Bean name override
      template-bean-name: kafkaTemplate
      
      # Serialization
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.apache.kafka.common.serialization.StringSerializer
      
      # Performance tuning
      retries: 3
      batch-size: 16384
      linger-ms: 5
      buffer-memory: 33554432
      acks: "all"
      
      # Additional producer properties
      properties:
        compression.type: gzip
        max.in.flight.requests.per.connection: 5
        security.protocol: PLAINTEXT
        
    # Consumer configuration for inbound events
    consumer:
      enabled: true
      type-header: "event-type"
      key-header: "event-key"
      kafka:
        topics:
          - domain-events
          - user-events
          - order-events
        group-id: my-service-consumer
        consumer-factory-bean-name: consumerFactory
        
  stepevents:
    enabled: true  # Uses Domain Events infrastructure - no separate config needed

---
# Production Profile - RabbitMQ Configuration
spring:
  config:
    activate:
      on-profile: production-rabbitmq
      
  rabbitmq:
    host: localhost
    port: 5672
    username: guest
    password: guest
    virtual-host: /
    connection-timeout: 60000
    publisher-confirm-type: correlated
    publisher-returns: true

firefly:
  events:
    enabled: true
    adapter: rabbit
    
    rabbit:
      # Optional: Bean name override
      template-bean-name: rabbitTemplate
      
      # Exchange and routing configuration (supports placeholders)
      exchange: "domain-events"        # Default: ${topic}
      routing-key: "${type}"           # Default: ${type}, supports ${topic}, ${type}, ${key}
    
    # Consumer configuration for inbound events
    consumer:
      enabled: true
      type-header: "event-type"
      key-header: "event-key"
      rabbit:
        queues:
          - user-events-queue
          - order-events-queue
          - payment-events-queue
          
  stepevents:
    enabled: true  # Uses Domain Events infrastructure - no separate config needed

---
# Production Profile - AWS SQS Configuration
spring:
  config:
    activate:
      on-profile: production-sqs

# AWS SDK configuration
aws:
  region: us-east-1
  credentials:
    access-key: ${AWS_ACCESS_KEY_ID}
    secret-key: ${AWS_SECRET_ACCESS_KEY}

firefly:
  events:
    enabled: true
    adapter: sqs
    
    sqs:
      # Optional: Bean name override
      client-bean-name: sqsAsyncClient
      
      # Option 1: Direct queue URL (validated format)
      queue-url: https://sqs.us-east-1.amazonaws.com/123456789012/domain-events-queue
      
      # Option 2: Queue name (auto-resolved via GetQueueUrl)
      # queue-name: domain-events-queue  # Supports alphanumeric, hyphens, underscores, .fifo
    
    # Consumer configuration for inbound events
    consumer:
      enabled: true
      type-header: "event-type"
      key-header: "event-key"
      sqs:
        # Consumer-specific queue configuration
        queue-url: https://sqs.us-east-1.amazonaws.com/123456789012/domain-events-consumer-queue
        # OR queue-name: domain-events-consumer-queue
        
        # Polling configuration
        wait-time-seconds: 20        # Long polling (0-20 seconds)
        max-messages: 10             # Max messages per poll (1-10)
        poll-delay-millis: 1000      # Delay between polls (100-300000ms)
        
  stepevents:
    enabled: true  # Uses Domain Events infrastructure - no separate config needed

---
# Complete Configuration Example - All Options
spring:
  config:
    activate:
      on-profile: complete-example

firefly:
  # Domain Events Configuration
  events:
    enabled: true
    adapter: auto  # AUTO, APPLICATION_EVENT, KAFKA, RABBIT, SQS, NOOP
    
    kafka:
      # Connection
      bootstrap-servers: localhost:9092
      template-bean-name: kafkaTemplate
      use-messaging-if-available: true
      
      # Serialization
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.apache.kafka.common.serialization.StringSerializer
      
      # Performance (with validation constraints)
      retries: 3                    # >= 0
      batch-size: 16384            # >= 1
      linger-ms: 5                 # >= 0
      buffer-memory: 33554432      # >= 1
      acks: "all"                  # "none", "all", "1", or "-1"
      
      # Additional properties
      properties:
        compression.type: gzip
        security.protocol: SSL
        
    rabbit:
      template-bean-name: rabbitTemplate
      exchange: "domain-events"
      routing-key: "${type}"
      
    sqs:
      client-bean-name: sqsAsyncClient
      queue-url: https://sqs.us-east-1.amazonaws.com/123456789012/events-queue  # Valid SQS URL pattern
      queue-name: events-queue     # 1-80 chars, alphanumeric + hyphens/underscores + optional .fifo
      
    # Consumer Configuration
    consumer:
      enabled: true
      type-header: "event-type"    # Non-blank, max 255 chars
      key-header: "event-key"      # Non-blank, max 255 chars
      
      kafka:
        topics:
          - domain-events
          - notifications
        group-id: my-service
        consumer-factory-bean-name: consumerFactory
        
      rabbit:
        queues:
          - events-queue
          - notifications-queue
          
      sqs:
        queue-url: https://sqs.us-east-1.amazonaws.com/123456789012/consumer-queue
        queue-name: consumer-queue
        wait-time-seconds: 10      # 0-20 seconds
        max-messages: 5            # 1-10 messages
        poll-delay-millis: 2000    # 100-300000 milliseconds
        
  # Step Events Configuration - Simplified!
  stepevents:
    enabled: true  # Only setting needed - uses Domain Events infrastructure automatically

# Spring Boot Actuator for monitoring
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,configprops
  endpoint:
    health:
      show-details: always
  health:
    defaults:
      enabled: false
    ping:
      enabled: true